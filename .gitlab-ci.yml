stages:
  - determine
  - build
  - tag
  - push

variables:
  IMAGE_NAME: "amoljorewar/shift-roster-app"
  DOCKER_TLS_CERTDIR: ""  # Disable TLS for Docker-in-Docker

services:
  - docker:dind  # Enable Docker-in-Docker for building and pushing images

determine_tags:
  stage: determine
  image: docker:20.10
  services:
    - docker:dind
  script:
    - apk add --no-cache curl jq
    - LATEST_TAG=$(curl -s -u "$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD" https://hub.docker.com/v2/repositories/$IMAGE_NAME/tags/?page_size=1 | jq -r '.results[] | select(.name=="latest") | .name')
    - echo "Latest tag found:" $LATEST_TAG
    - |
      if [[ $LATEST_TAG == "null" || -z "$LATEST_TAG" ]]; then
        echo "No valid 'latest' tag found. Defaulting to v1.0."
        NEW_TAG="v1.0"
      else
        MAJOR=$(echo "$LATEST_TAG" | cut -d. -f1 | tr -d "v")
        MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
        NEW_TAG="v$MAJOR.$((MINOR + 1))"
      fi
    - echo "New tag for the next image:" $NEW_TAG
    - echo $NEW_TAG > .new_versioned_tag
    - echo "latest" > .latest_tag
  artifacts:
    paths:
      - .new_versioned_tag
      - .latest_tag

check_for_changes:
  stage: determine
  image: alpine:latest
  script:
    - echo "Checking for changes in the application code..."
    - |
      if git diff --quiet HEAD^ HEAD ./src; then
        echo "No changes detected in application code."
        echo "SKIP_BUILD=true" > skip_build.env
      else
        echo "Changes detected in application code."
        echo "SKIP_BUILD=false" > skip_build.env
      fi
  artifacts:
    reports:
      dotenv: skip_build.env

build_image:
  stage: build
  image: docker:20.10-dind
  services:
    - docker:dind
  dependencies:
    - check_for_changes
  script:
    - source skip_build.env
    - |
      if [[ "$SKIP_BUILD" == "true" ]]; then
        echo "Skipping build stage as no changes were detected."
        exit 0
      fi
    - LATEST_TAG=$(cat .latest_tag)
    - echo "Building Docker image with tag $LATEST_TAG."
    - docker build -t $IMAGE_NAME:latest .
    - echo "Saving Docker image as an artifact."
    - docker save $IMAGE_NAME:latest > image.tar
  artifacts:
    paths:
      - image.tar
      - .latest_tag
      - .new_versioned_tag

tag_previous_image:
  stage: tag
  image: docker:20.10
  services:
    - docker:dind
  dependencies:
    - determine_tags
    - build_image
  script:
    - source skip_build.env
    - |
      if [[ "$SKIP_BUILD" == "true" ]]; then
        echo "Skipping tag stage as no changes were detected."
        exit 0
      fi
    - PREVIOUS_TAG=$(cat .new_versioned_tag)
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$DOCKER_REGISTRY" --password-stdin
    - echo "Re-tagging 'latest' to $PREVIOUS_TAG."
    - docker pull $IMAGE_NAME:latest
    - docker tag $IMAGE_NAME:latest $IMAGE_NAME:$PREVIOUS_TAG
    - docker push $IMAGE_NAME:$PREVIOUS_TAG

push_image:
  stage: push
  image: docker:20.10-dind
  services:
    - docker:dind
  dependencies:
    - build_image
  script:
    - source skip_build.env
    - |
      if [[ "$SKIP_BUILD" == "true" ]]; then
        echo "Skipping push stage as no changes were detected."
        exit 0
      fi
    - echo "Loading Docker image from artifacts."
    - docker load < image.tar
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin
    - echo "Pushing 'latest' tag for the new image."
    - docker push $IMAGE_NAME:latest
