stages:
  - pull  # Added the pull stage
  - determine
  - build
  - tag
  - push

variables:
  IMAGE_NAME: "amoljorewar/shift-roster-app"
  DOCKER_TLS_CERTDIR: ""  # Disable TLS for Docker-in-Docker

services:
  - docker:dind  # Enable Docker-in-Docker for building and pushing images

pull_code:
  stage: pull  # The new pull stage
  image: alpine:latest  # Using a lightweight alpine image for pulling code
  script:
    - apk add --no-cache git  # Install git
    - git clone https://github.com/username/repository.git  # Replace with your GitHub repo URL
    - cd repository
    - git pull origin main  # Replace 'main' with the branch you want to pull
    - echo "Code pulled from GitHub."

determine_tags:
  stage: determine
  image: docker:20.10
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  script:
    - apk add --no-cache curl jq
    - LATEST_TAG=$(curl -s -u "$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD" https://hub.docker.com/v2/repositories/$IMAGE_NAME/tags/?page_size=1 | jq -r '.results[0].name')
    - echo "Latest tag found:"
    - echo "$LATEST_TAG"
    - |
      case "$LATEST_TAG" in
        v*.*)
          MAJOR=$(echo "$LATEST_TAG" | cut -d. -f1 | tr -d "v")
          MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
          NEW_TAG="v$MAJOR.$((MINOR + 1))"
          ;;
        *)
          echo "No valid tag found, defaulting to v1.0"
          NEW_TAG="v1.0"
          ;;
      esac
    - echo "New tag for the next image:"
    - echo "$NEW_TAG"
    - echo $LATEST_TAG > .previous_tag
    - echo $NEW_TAG > .new_versioned_tag
    - echo "latest" > .latest_tag
  artifacts:
    paths:
      - .latest_tag
      - .previous_tag
      - .new_versioned_tag

build_image:
  stage: build
  image: docker:20.10-dind  # Use a DIND image with apt-get for added flexibility
  services:
    - docker:dind
  script:
    - LATEST_TAG=$(cat .latest_tag)
    - echo "Building Docker image with tag $LATEST_TAG."
    - docker build -t $IMAGE_NAME:$LATEST_TAG .
    - echo "Saving Docker image as an artifact."
    - docker save $IMAGE_NAME:$LATEST_TAG > image.tar
  artifacts:
    paths:
      - image.tar
      - .latest_tag
      - .new_versioned_tag

tag_previous_image:
  stage: tag
  image: docker:20.10
  services:
    - docker:dind
  dependencies:
    - determine_tags
  script:
    - PREVIOUS_TAG=$(cat .previous_tag)
    - NEW_VERSIONED_TAG=$(cat .new_versioned_tag)
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$DOCKER_REGISTRY" --password-stdin
    - |
      if [[ -n "$PREVIOUS_TAG" && "$PREVIOUS_TAG" != "null" ]]; then
        echo "Re-tagging $IMAGE_NAME:$PREVIOUS_TAG to $IMAGE_NAME:$NEW_VERSIONED_TAG."
        docker pull $IMAGE_NAME:$PREVIOUS_TAG
        docker tag $IMAGE_NAME:$PREVIOUS_TAG $IMAGE_NAME:$NEW_VERSIONED_TAG
        docker push $IMAGE_NAME:$NEW_VERSIONED_TAG
      else
        echo "No previous tag to re-tag."
      fi
  artifacts:
    paths:
      - .new_versioned_tag

push_image:
  stage: push
  image: docker:20.10-dind
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo "Loading Docker image from artifacts."
    - docker load < image.tar
    - LATEST_TAG=$(cat .latest_tag)
    - NEW_VERSIONED_TAG=$(cat .new_versioned_tag)
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin
    - echo "Pushing image with tag:"
    - echo "$LATEST_TAG"
    - docker tag $IMAGE_NAME:latest $IMAGE_NAME:$LATEST_TAG
    - docker push $IMAGE_NAME:$LATEST_TAG
    - docker push $IMAGE_NAME:latest
