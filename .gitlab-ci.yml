stages:
  - determine
  - build
  - tag
  - push

variables:
  IMAGE_NAME: "amoljorewar/shift-roster-app"
  DOCKER_TLS_CERTDIR: ""

services:
  - docker:dind

determine_tags:
  stage: determine
  image: docker:20.10
  services:
    - docker:dind
  script:
    - apk add --no-cache curl jq
    - echo "Fetching the latest tags from Docker Hub..."
    - LATEST_TAG=$(curl -s -u "$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD" https://hub.docker.com/v2/repositories/$IMAGE_NAME/tags/?page_size=10 | jq -r '.results[] | select(.name | test("^v[0-9]+\\.[0-9]+$")) | .name' | sort -rV | head -n 1)
    - echo "Latest semantic version tag found:"
    - echo "$LATEST_TAG"
    - |
      if [[ -z "$LATEST_TAG" ]]; then
        echo "No valid version tag found. Starting at v1.0."
        NEW_TAG="v1.0"
      else
        MAJOR=$(echo "$LATEST_TAG" | cut -d. -f1 | tr -d "v")
        MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
        NEW_TAG="v$MAJOR.$((MINOR + 1))"
      fi
    - echo "New tag for the next image:"
    - echo "$NEW_TAG"
    - echo $NEW_TAG > .new_versioned_tag
    - echo "latest" > .latest_tag
  artifacts:
    paths:
      - .new_versioned_tag
      - .latest_tag

check_for_changes:
  stage: determine
  image: alpine:latest
  script:
    - echo "Checking for changes in the application code..."
    - |
      if git diff --quiet HEAD^ HEAD ./src; then
        echo "No changes detected in application code."
        echo "SKIP_BUILD=true" > skip_build.env
      else
        echo "Changes detected in application code."
        echo "SKIP_BUILD=false" > skip_build.env
      fi
  artifacts:
    reports:
      dotenv: skip_build.env
    paths:
      - skip_build.env

build_image:
  stage: build
  image: docker:20.10-dind
  services:
    - docker:dind
  dependencies:
    - check_for_changes
  script:
    - echo "Loading skip_build.env..."
    - source skip_build.env
    - |
      if [[ "$SKIP_BUILD" == "true" ]]; then
        echo "Skipping build stage as no changes were detected."
        exit 0
      fi
    - echo "Proceeding with the build stage."
    - docker build -t $IMAGE_NAME:latest .
    - docker save $IMAGE_NAME:latest > image.tar
  artifacts:
    paths:
      - image.tar
      - .latest_tag
      - .new_versioned_tag

tag_previous_image:
  stage: tag
  image: docker:20.10
  services:
    - docker:dind
  dependencies:
    - determine_tags
    - build_image
  script:
    - PREVIOUS_TAG=$(cat .new_versioned_tag)
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$DOCKER_REGISTRY" --password-stdin
    - echo "Re-tagging 'latest' to $PREVIOUS_TAG."
    - docker pull $IMAGE_NAME:latest
    - docker tag $IMAGE_NAME:latest $IMAGE_NAME:$PREVIOUS_TAG
    - docker push $IMAGE_NAME:$PREVIOUS_TAG

push_image:
  stage: push
  image: docker:20.10-dind
  services:
    - docker:dind
  dependencies:
    - build_image
  script:
    - echo "Loading Docker image from artifacts."
    - docker load < image.tar
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin
    - echo "Pushing 'latest' tag for the new image."
    - docker push $IMAGE_NAME:latest
